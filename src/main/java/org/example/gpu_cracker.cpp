#include <jni.h>
#include <string.h>
#include "org_example_CUDASolution.h"  // Generated by javac -h

// These must be implemented in your CUDA .cu files
extern void launchCrackerSHA(const unsigned char* targetHash, const char* charset, int charsetLen, int length, char* hostResult);
extern void launchMd5CrackKernel(const char* charset, int length, const unsigned char* targetHash, char* hostResult);

/*
 * Class:     CUDASolution
 * Method:    nativeBruteForce
 * Signature: (Ljava/lang/String;I[BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_CUDASolution_nativeBruteForce
  (JNIEnv* env, jobject, jstring charsetJ, jint length, jbyteArray hashJ, jint hashMode)
{
    const char* charset = env->GetStringUTFChars(charsetJ, 0);
    int charLen = env->GetStringUTFLength(charsetJ);
    jbyte* targetHash = env->GetByteArrayElements(hashJ, 0);

    char result[8] = {0};

    if (hashMode == 0) {
        // 0 = SHA-256
        launchCrackerSHA((unsigned char*)targetHash, charset, charLen, length, result);
    } else if (hashMode == 1) {
        // 1 = MD5
        launchMd5CrackKernel(charset, length, (unsigned char*)targetHash, result);
    } else {
        env->ReleaseStringUTFChars(charsetJ, charset);
        env->ReleaseByteArrayElements(hashJ, targetHash, 0);
        return env->NewStringUTF("Invalid hash mode");
    }

    env->ReleaseStringUTFChars(charsetJ, charset);
    env->ReleaseByteArrayElements(hashJ, targetHash, 0);

    return env->NewStringUTF(result);
}
